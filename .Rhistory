auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height + height:armassist
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height + height:raterisk
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height + height:bonemed
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height + height:bonetreat
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat + age:height +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height +
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height +
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat + age:height +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
#raterisk
categ_categ_compare(glow_bonemed, "raterisk", "fracture")
#fracscore
cts_categ_compare(glow_bonemed, "fracscore", "fracture")
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height+
fracscore
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height+
fracscore + fracscore:priorfrac
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height+
fracscore:priorfrac
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height+
fracscore:raterisk
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height+
fracscore:bonemed
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat + age:fracscore
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat + age:fracscore +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat + height*age +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
train_preds = predict(model, train, type="response")
train_pred_class_num = unname(ifelse(train_preds > 0.5,1,0))
train_pred_class = as.factor(unname(ifelse(train_preds > 0.5,"Yes","No")))
train_targ = ifelse(train$fracture == "Yes",1,0)
plot(train_preds, train_targ, col = c("red", "blue")[train_pred_class])
plot_df = data.frame(train_preds, train_targ)
plot_df %>% ggplot(aes(x=train_preds, y=train_targ)) + geom_smooth() + geom_point()
plot_df = data.frame(train_preds, train_targ, train_pred_class)
plot_df %>% ggplot(aes(x=train_preds, y=train_targ, col=train_pred_class)) + geom_smooth() + geom_point()
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
simple_log_preds = predict(model, test, type="response")
threshold = 0.5
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
misClasificError = mean(simple_log_preds != test$fracture)
print(paste('Accuracy',1-misClasificError))
model=glm(fracture~
priorfrac+
age+
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height,
family="binomial",data=train)
simple_log_preds = predict(model, test, type="response")
threshold = 0.5
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
misClasificError = mean(simple_log_preds != test$fracture)
print(paste('Accuracy',1-misClasificError))
simple_log_preds = predict(model, test, type="response")
threshold = 0.2
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
misClasificError = mean(simple_log_preds != test$fracture)
print(paste('Accuracy',1-misClasificError))
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
simple_log_preds = predict(model, test, type="response")
threshold = 0.2
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
misClasificError = mean(simple_log_preds != test$fracture)
print(paste('Accuracy',1-misClasificError))
simple_log_preds = predict(model, test, type="response")
threshold = 0.8
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
misClasificError = mean(simple_log_preds != test$fracture)
print(paste('Accuracy',1-misClasificError))
#Evaluate KNN Model
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
library(caret)
#Evaluate KNN Model
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
model_num = model_num + 1
model=glm(fracture~
priorfrac+
age + tan(age) + age:priorfrac + age:raterisk + age:bonemed + age:bonetreat +
momfrac+
armassist+
raterisk+
bonemed+
bonetreat+
height
,family="binomial",data=train)
summary(model)
#vif(model)
auc = plot_roc_and_get_auc(model, test, "fracture")
model_stats = c(model_num, auc)
model_compare_df = rbind(model_compare_df, model_stats)
model_compare_df
simple_log_preds = predict(model, test, type="response")
threshold = 0.5
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.2
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.5
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.6
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.55
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.6
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.65
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
simple_log_preds = predict(model, test, type="response")
threshold = 0.61
simple_log_preds = ifelse(simple_log_preds > threshold,"Yes","No")
simple_log_preds
#Confusion Matrix
CM_rep = confusionMatrix(table(simple_log_preds, test$fracture))
CM_rep
